<section>
  <h1 class="headline-text">Create letter template</h1>
  <!-- template name input-->
  <div class="mb-3">
    <label for="templateName" class="form-label">Letter template name:</label>
    <input type="text" class="form-control" name="templateName" form="addLetterForm" id="templateName" aria-describedby="emailHelp">
  </div>

  <!-- Accordion for all information and iputs -->
  <div class="accordion" id="accordionPanelsStayOpenExample">

    <!-- Receivers stoarge list -->
    <div class="accordion-item">
      <h2 class="accordion-header">
        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapseOne" aria-expanded="false" aria-controls="panelsStayOpen-collapseOne">
          Receivers selection
        </button>
      </h2>
      <div id="panelsStayOpen-collapseOne" class="accordion-collapse collapse">
        <div class="accordion-body">

          <!-- top tab with select "select all" button and seacrh input -->
          <div class="all-receivers-top-tab">
            <div class="addLetter-all-receivers-buttons-div">
              <button type="button" class="btn btn-success" onclick="addSelectedToReceiversList()">Add selected to receivers list</button>
            </div>
            <div class="addLetter-all-receivers-buttons-div">
              <button id="selectAllButton" type="button" class="btn btn-primary" onclick="selectAll()">Select all</button>
              <input class="form-control me-2 all-receivers-table-search-input" id="searchInput" type="text" name="searchInput" placeholder="Search">
            </div>
          </div>
          
          <!-- all receivers table  -->
          <table class="table table-primary table-hover addLetter-all-receivers-table">
            <tbody>
              <% receiversList.forEach((receiver) => { %>
              <tr class="receiver all-receivers-table-receiver">
                <td class="table-primary"><input class="form-check-input" type="checkbox" name="receiverId" value="<%= receiver._id %>,<%= receiver.name %>,<%= receiver.email %>" ></td> 
                <td class="table-primary"><%= receiver.name %></td>
                <td class="table-primary"><%= receiver.email %></td>
              </tr>
              <% }); %>
            </tbody>
          </table>
          
        </div>
      </div>
    </div>

    <form action="/letters/add" method="post" id="addLetterForm">

      <!-- Letter settings -->
      <div class="accordion-item">
        <h2 class="accordion-header">
          <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapseTwo" aria-expanded="false" aria-controls="panelsStayOpen-collapseTwo">
            Letter
          </button>
        </h2>
        <div id="panelsStayOpen-collapseTwo" class="accordion-collapse collapse">
          <div class="accordion-body">

            <div class="container">
              <div class="row row-cols-2">
                <!-- letter text -->
                <div class="col-8">
                  <div class="form-floating">
                    <textarea class="form-control addLetter-textarea" placeholder="Leave a comment here" id="floatingTextarea2" name="rowMessage" style="height: 20rem"></textarea>
                    <label for="floatingTextarea2">Letter text</label>
                  </div>
                </div>
                <!-- changeble fields -->
                <div class="col-4">
                  <div class="card">
                    <div class="card-header">
                      Changable fields:
                    </div>
                    <ul id="letter-changable-fields-list" class="list-group list-group-flush">
                      <!-- name field by default -->
                      <li class="list-group-item disabled">&ltname&gt</li>
                    </ul>
                  </div>
                </div>
              </div>
            </div>

            <input type="hidden" name="changableFieldsList">
            <button type="button" class="btn btn-success" onclick="addLetter(); addChangableFields()">Add letter</button>

          </div>
        </div>
      </div>


      <!-- Selected receivers settings -->
      <div class="accordion-item">
        <h2 class="accordion-header">
          <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-selectedReceivers" aria-expanded="false" aria-controls="panelsStayOpen-selectedReceivers">
            Selected receivers list
          </button>
        </h2>
        <div id="panelsStayOpen-selectedReceivers" class="accordion-collapse collapse">
          <div id="selected-receivers-div" class="accordion-body"></div>
        </div>
      </div>

    </form>
  </div>

  <!-- Create button -->
  <button id="create-template-button" type="button" class="btn btn-success" onclick="addFormHiddenInputs(); sendForm();" disabled>Create template</button>
</section>

<!-- <input type="hidden" name=""> -->

<script>
  // ALL RECEIVERS SECTION
  //searching 
  const searchInput = document.querySelector('.all-receivers-table-search-input');
  searchInput.addEventListener('input', searchFunc);

  function searchFunc() { 
    const filter = searchInput.value.toLowerCase();
    const itemList = document.querySelectorAll('.all-receivers-table-receiver');
    itemList.forEach((item) => {
      const textContent = item.innerText.replace('Add', '').replace('Remove', '');
      if(textContent.toLowerCase().includes(filter)){
        item.style.display = '';
      }else{
        item.style.display = 'none';
      }
    });
  };

  //select all button
  function selectAll() {
    const receiversCheckboxes = document.querySelectorAll('.all-receivers-table-receiver .form-check-input');
    const button = document.querySelector('#selectAllButton');
    if(!button.value){
      button.value = "pressed";
      button.innerText = 'Unselect all';
      button.classList.remove('btn-primary');
      button.classList.add('btn-danger');
      receiversCheckboxes.forEach(checkbox => checkbox.checked = true);
    }else{
      button.value = '';
      button.innerText = 'Select all';
      button.classList.remove('btn-danger');
      button.classList.add('btn-primary');
      receiversCheckboxes.forEach(checkbox => checkbox.checked = false);
    }
  };

  //adding selelected to receivers list
  function addSelectedToReceiversList() {
    const placeForSelectedReceivers = document.querySelector('#selected-receivers-div'); //place where put selected receivers
    const selectedChecboxes = [...document.querySelectorAll('.all-receivers-table-receiver .form-check-input:checked')]; //transform html collection to js array
    const selectedReceiversHtmlArr = selectedChecboxes.map((receiver) => {
      const receiverInformation = receiver.value.split(',');
      const receiverObj = { 
        _id: receiverInformation[0],
        name: receiverInformation[1],
        email: receiverInformation[2]
      };
      return `
        <div class="card added-receiver-card" >
          <div class="card-body">

            <!-- receiver info -->
            <h5 class="card-title">${receiverObj.name}</h5>
            <h6 class="card-subtitle mb-2 text-body-secondary">${receiverObj.email}</h6>

            <!-- letter text for current receiver -->
            <div class="accordion-item">
              <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#a${receiverObj._id}" aria-expanded="false" aria-controls="flush-collapseOne">
                  Letter text
                </button>
              </h2>
              <div id="a${receiverObj._id}" class="accordion-collapse collapse" >
                <div class="accordion-body addLetter-receiver-text"></div>
              </div>
            </div>

            <!-- changable fields -->
            <label class="form-label addLetter-receiver-card-fields-label" style="margin-top: 1rem; display: none;">Changable fields:</label>
            <ul class="list-group addLetter-receiver-card-fields-ul" style="display: none;"></ul>

            <input type="hidden" name="_id" value="${receiverObj._id}">
            <input type="hidden" name="name" value="${receiverObj.name}">
            <input type="hidden" name="email" value="${receiverObj.email}">
            <input type="hidden" name="receiverLetterText">

          </div>
        </div>
      `;
    });
    const selectedReceiversHtml = selectedReceiversHtmlArr.reduce((acc, cur) => acc + cur, '');
    placeForSelectedReceivers.innerHTML = selectedReceiversHtml;
  };


  // LETTER SECTION
  const letterChangablefields = document.querySelector('#letter-changable-fields-list');
  const letterTextInput = document.querySelector('.addLetter-textarea');

  // adding "Changable fields:" on fly. Select from "letter text" textarea
  letterTextInput.addEventListener('input', () => {
    const text = document.querySelector('.addLetter-textarea').value;
    updateChangableFields(text);
  });

  function onlyUnique(value, index, array) {
    return array.indexOf(value) === index;
  };

  function updateChangableFields(text) {
    const allFieldsArr = text.match(/<([^>]+)>/g);
    if(allFieldsArr){
      const fieldsArray = allFieldsArr.filter(onlyUnique);
      if(fieldsArray.includes('<name>')){
        fieldsArray.splice(fieldsArray.indexOf('<name>'), 1);
      }
      if(fieldsArray.length > 0){
        let fieldsInnerHtmlForLetter = '<li class="list-group-item disabled">&ltname&gt</li>';
        const fieldsArrForInnerHtml = fieldsArray.map(el => el.replace(/<|>/g, ''))
        fieldsArrForInnerHtml.forEach((field) => {
          fieldsInnerHtmlForLetter += `<li class="list-group-item">&lt${field}&gt</li>`;
        });
        letterChangablefields.innerHTML = fieldsInnerHtmlForLetter;
      }else{
        letterChangablefields.innerHTML = '<li class="list-group-item disabled">&ltname&gt</li>';
      }
    }else{
      letterChangablefields.innerHTML = '<li class="list-group-item disabled">&ltname&gt</li>';
    }
  };

  //adding letter for every receiver in receiverList
  function addLetter() {
    const selectedReceiversCards = document.querySelectorAll('.card.added-receiver-card');
    const text = document.querySelector('.addLetter-textarea').value;
    selectedReceiversCards.forEach((card) => {
      const placeForCurrentReceiverLetterText = card.querySelector('.addLetter-receiver-text');
      if(text.includes('<name>')){
        const receiverName = card.children[0].children[0].textContent;
        placeForCurrentReceiverLetterText.innerText = text.replace(/<name>/g, receiverName);
      }else{
        placeForCurrentReceiverLetterText.innerText = text;
      }
    });
  };

  //adding changable fields for every receiver in receiverList
  function addChangableFields() {
    //adding changable fields to receivers cards
    const selectedReceiversPlacesForChangableFields = document.querySelectorAll('.addLetter-receiver-card-fields-ul');
    const selectedReceiversChangableFieldsLabels = document.querySelectorAll('.addLetter-receiver-card-fields-label');
    if(letterChangablefields.children.length === 1){
      selectedReceiversChangableFieldsLabels.forEach(label => label.style.display = 'none');
      selectedReceiversPlacesForChangableFields.forEach(place => place.style.display = 'none');
    }else{
      const changableFieldsArr = [...letterChangablefields.children].map(child => {
        const name = child.innerHTML;
        return `
          <li class="list-group-item">
            <label class="form-label">${name}</label>
            <input class="form-control form-control-sm card-changable-field-input" type="text" name="${name}" aria-label=".form-control-sm example">
          </li>
        `;
      });
      const [_, ...changableFieldsArrWithoutName] = changableFieldsArr;
      const changableFieldsHtml = changableFieldsArrWithoutName.reduce((acc, cur) => acc + cur, '');

      selectedReceiversChangableFieldsLabels.forEach(label => label.style.display = 'block');
      selectedReceiversPlacesForChangableFields.forEach(place => {
        place.style.display = 'block';
        place.innerHTML = changableFieldsHtml;
      });
    }

    //adding changable fields names to hidden input
    const hiddenInputForChangableFieldsList = document.querySelector('input[name=changableFieldsList]');
    const changableFieldsUl = document.querySelector('#letter-changable-fields-list');
    const changableFieldsNames = [...changableFieldsUl.children].map((li) => li.innerText);
    hiddenInputForChangableFieldsList.value = changableFieldsNames;
  };


  //checking if user setup all inputs and changing user text depending on card changable fields
  ['input', 'click'].forEach(event => document.querySelector('section').addEventListener(event, sectionEventFunc));
  function sectionEventFunc(event) {
    if(event.type === 'input' && [...event.target.classList].includes('card-changable-field-input')){
      const currentCard = event.target.parentElement.parentElement.parentElement;
      const currentCardLetterTextElementHtml = currentCard.children[2].children[1].children[0];
      const currentCardListItemsHtml = [...currentCard.children[4].children];
      const letterText = document.querySelector('#floatingTextarea2').value;
      const cardAllChangableFieldsArr = currentCardListItemsHtml.map((li) => {
        return {
          name: li.children[1].name,
          value: li.children[1].value
        };
      });
      
      if(letterText.includes('<name>')){
        const receiverName = currentCard.querySelector('.card-title').textContent;
        const letterTextWithName = letterText.replace(/<name>/g, receiverName);
        editReceiverCardText(letterTextWithName, currentCardLetterTextElementHtml, cardAllChangableFieldsArr);
      }else{
        editReceiverCardText(letterText, currentCardLetterTextElementHtml, cardAllChangableFieldsArr);
      }
    }
    createButtonChecker();
  };

  // checking if user setup all inputs
  function createButtonChecker() {
    const createButton = document.querySelector('#create-template-button');
    const templateNameValidation = document.querySelector('#templateName').value.length > 0;
    const letterTextValidation = document.querySelector('#floatingTextarea2').value.length > 0;
    const selectedUsersValidation = document.querySelector('#selected-receivers-div').children.length > 0;
    if(templateNameValidation && letterTextValidation && selectedUsersValidation) {
      createButton.disabled = false;
    }else{
      createButton.disabled = true;
    }
  };

  // changing user text depending on card changable fields
  function editReceiverCardText(text, letterTextElement, changableFieldsArr) {
    if(changableFieldsArr.length === 0){
      letterTextElement.innerText = text;
    }else{
      const fieldName = changableFieldsArr[0].name;
      const fieldValue = changableFieldsArr[0].value;
      let newText;
      const match = new RegExp(fieldName, 'g');
      fieldValue !== '' ? newText = text.replace(match, fieldValue) : newText = text;
      const [_, ...newChangableFieldsArr] = changableFieldsArr;
      editReceiverCardText(newText, letterTextElement, newChangableFieldsArr);
    }
  };

  // FORM SENDING SETUP
  //adding receiver personalized letter text to hidden input before sending
  function addFormHiddenInputs() {
    // adding each card  personilized letter text to form hidden input 
    const selectedReceiversCards = document.querySelectorAll('.added-receiver-card');
    selectedReceiversCards.forEach((card) => {
      const receiverLetterText = card.querySelector('.addLetter-receiver-text').innerHTML;
      const hiddenInputForLetterText = card.querySelector('input[name=receiverLetterText]');
      hiddenInputForLetterText.value = receiverLetterText;
    });
  };

  //sending from 
  function sendForm() {
    const form = document.querySelector('#addLetterForm');
    form.submit();
  };
  
</script>